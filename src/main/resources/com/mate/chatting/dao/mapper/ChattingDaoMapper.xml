<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.mate.chatting.dao.ChattingDao">

    <!-- 채팅방 목록 조회 -->
    <select id="selectRoomList" parameterType="string" resultType="com.mate.chatting.vo.ChattingRoomVO">
        SELECT CR.CHATTING_ID AS chttingId
             , LM.MESSAGE_CONTENT AS lastMessage
             , TO_CHAR(LM.SEND_TIME, 'YYYY.MM.DD HH24:MI') AS sendTime
             , (SELECT OPEN_MEMBER 
                  FROM CHATTING_ROOM 
                 WHERE CHATTING_ID = CR.CHATTING_ID 
                   AND OPEN_MEMBER != #{usrId}) AS targetId
             , (SELECT COUNT(*)
                  FROM MESSAGE M
                 WHERE M.CHATTING_ID = CR.CHATTING_ID 
                   AND M.READ_FL = 'N'
                   AND M.SENDER_ID != #{usrId}) AS notReadCount
          FROM CHATTING_ROOM CR
          LEFT JOIN ( SELECT CHATTING_ID
                           , MESSAGE_CONTENT
                           , SEND_TIME
                        FROM MESSAGE
                       WHERE (CHATTING_ID, SEND_TIME)
                          IN ( SELECT CHATTING_ID
                                    , MAX(SEND_TIME)
                                 FROM MESSAGE
                                GROUP BY CHATTING_ID )
                    ) LM
            ON CR.CHATTING_ID = LM.CHATTING_ID
         WHERE CR.OPEN_MEMBER = #{usrId} 
            OR CR.PARTICIPANT = #{usrId}
         ORDER BY LM.SEND_TIME DESC NULLS LAST
    </select>

    <!-- 채팅방 존재 여부 확인 -->
    <select id="checkChattingId" parameterType="map" resultType="string">
        SELECT CHATTING_ID
          FROM CHATTING_ROOM
         WHERE (OPEN_MEMBER = #{usrId} AND PARTICIPANT = #{targetId})
            OR (OPEN_MEMBER = #{targetId} AND PARTICIPANT = #{usrId})
    </select>

    <!-- 채팅방 생성 -->
    <insert id="createChattingRoom" parameterType="map">
        <selectKey keyProperty="chattingId" resultType="string" order="BEFORE">
            SELECT TO_CHAR(SEQ_CHATTING_ROOM_PK.NEXTVAL) 
              FROM DUAL
        </selectKey>
        INSERT INTO CHATTING_ROOM
             ( CHATTING_ID
	         , CH_CREATE_DATE
	         , OPEN_MEMBER
	         , PARTICIPANT )
        VALUES ( #{chattingId}
             , SYSDATE
             , #{usrId}
             , #{targetId} )
    </insert>

    <!-- 메시지 삽입 -->
    <insert id="insertMessage" parameterType="com.mate.chatting.vo.MessageVO">
        INSERT INTO MESSAGE
	         ( MESSAGE_ID
	         , MESSAGE_CONTENT
	         , READ_FL
	         , SEND_TIME
	         , SENDER_ID
	         , CHATTING_ID )
        VALUES ( SEQ_MESSAGE_PK.NEXTVAL
             , #{messageContent}
             , 'N'
             , SYSDATE
             , #{senderId}
             , #{chattingId} )
    </insert>

    <!-- 채팅 읽음 상태 업데이트 -->
    <update id="updateReadFlag" parameterType="map">
        UPDATE MESSAGE
           SET READ_FL = 'Y'
         WHERE CHATTING_ID = #{chattingId}
           AND SENDER_ID != #{usrId}
    </update>

    <!-- 채팅 메시지 목록 조회 -->
    <select id="selectMessageList" parameterType="string" resultType="com.mate.chatting.vo.MessageVO">
        SELECT MESSAGE_ID AS messageId
             , MESSAGE_CONTENT AS messageContent
             , READ_FL AS readFlag
             , SENDER_ID AS senderId
             , CHATTING_ID AS chattingId
             , TO_CHAR(SEND_TIME, 'YYYY.MM.DD HH24:MI') AS sendTime
          FROM MESSAGE
         WHERE CHATTING_ID = #{chattingId}
         ORDER BY SEND_TIME ASC
    </select>

    <!-- 채팅 상대 검색 -->
    <select id="selectTarget" parameterType="map" resultType="com.mate.user.vo.UserVO">
        SELECT USR_ID AS usrId
             , USR_LGN_ID AS usrLgnId
             , USR_EML AS usrEml
          FROM USR_INF
         WHERE (USR_LGN_ID LIKE '%' || #{query} || '%' 
            OR USR_EML LIKE '%' || #{query} || '%')
           AND USR_ID != #{usrId}
           AND USR_IS_CL = 'N'
    </select>

</mapper>
