<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.mate.websocket.dao.ChattingDao">

   <resultMap type="com.mate.websocket.vo.ChattingRoomVO" id="chattingRoom_rm">
      <id property="chattingId" column="CHATTING_ID" />
      <result property="lastMessage" column="LAST_MESSAGE" />
      <result property="sendTime" column="SEND_TIME" />
      <result property="targetId" column="TARGET_ID" />
      <result property="notReadCount" column="NOT_READ_COUNT" />
   </resultMap>

   <resultMap type="com.mate.websocket.vo.MessageVO" id="message_rm">
      <id property="messageId" column="MESSAGE_ID" />
      <result property="messageContent" column="MESSAGE_CONTENT" />
      <result property="readFlag" column="READ_FL" />
      <result property="senderId" column="SENDER_ID" />
      <result property="chattingId" column="CHATTING_ID" />
      <result property="sendTime" column="SEND_TIME" />
   </resultMap>

   <resultMap type="com.mate.user.vo.UserVO" id="user_rm">
      <id property="usrId" column="USR_ID"/>
      <result property="usrEml" column="USR_EML"/>
   </resultMap>

   <!--=========================================================================================-->

   <!-- 채팅방 목록 조회 -->
   <select id="selectRoomList" resultMap="chattingRoom_rm">
      SELECT CHATTING_ID
           , (SELECT MESSAGE_CONTENT 
                FROM (SELECT * FROM MESSAGE M2 WHERE M2.CHATTING_ID = R.CHATTING_ID ORDER BY MESSAGE_ID DESC) 
               WHERE ROWNUM = 1) AS LAST_MESSAGE
           , TO_CHAR(NVL((SELECT MAX(SEND_TIME) SEND_TIME FROM MESSAGE M WHERE R.CHATTING_ID  = M.CHATTING_ID), CH_CREATE_DATE), 'YYYY.MM.DD') AS SEND_TIME
           , NVL2((SELECT OPEN_MEMBER 
                     FROM CHATTING_ROOM R2 
                    WHERE R2.CHATTING_ID = R.CHATTING_ID 
                      AND R2.OPEN_MEMBER = #{usrId})
                        , R.PARTICIPANT
                        , R.OPEN_MEMBER ) AS TARGET_ID
           , (SELECT COUNT(*) 
                FROM MESSAGE M 
               WHERE M.CHATTING_ID = R.CHATTING_ID 
                 AND READ_FL = 'N' 
                 AND SENDER_ID != #{usrId}) AS NOT_READ_COUNT
           , (SELECT MAX(MESSAGE_ID) 
                FROM MESSAGE M 
               WHERE R.CHATTING_ID  = M.CHATTING_ID) AS MAX_MESSAGE_ID
        FROM CHATTING_ROOM R
       WHERE OPEN_MEMBER = #{usrId}
          OR PARTICIPANT = #{usrId}
       ORDER BY MAX_MESSAGE_ID DESC NULLS LAST
   </select>

   <!-- 채팅 확인 -->
   <select id="checkChattingId" resultType="_int">
      SELECT NVL(SUM(CHATTING_ID),0) AS CHATTING_ID 
      FROM CHATTING_ROOM
      WHERE (OPEN_MEMBER = #{loginUsrId} AND PARTICIPANT = #{targetId})
      OR (OPEN_MEMBER = #{targetId} AND PARTICIPANT = #{loginUsrId})
   </select>

   <!-- 채팅방 생성 -->
   <insert id="createChattingRoom" parameterType="map" useGeneratedKeys="true">
      <selectKey keyProperty="chattingId" order="BEFORE" resultType="_int">
         SELECT SEQ_CHATTING_ROOM_ID.NEXTVAL FROM DUAL
      </selectKey>
   
      INSERT INTO CHATTING_ROOM
      VALUES(#{chattingId}, DEFAULT, #{loginUsrId}, #{targetId})
   </insert>

   <!-- 채팅 메시지 삽입 -->
   <insert id="insertMessage">
      INSERT INTO MESSAGE
      VALUES(SEQ_MESSAGE_ID.NEXTVAL, #{messageContent}, DEFAULT, DEFAULT, #{senderId}, #{chattingId})
   </insert>

   <!-- 채팅 메시지 중 내가 보내지 않은 글을 읽음으로 표시 -->
   <update id="updateReadFlag">
      UPDATE MESSAGE SET
      READ_FL = 'Y'
      WHERE CHATTING_ID = #{chattingId}
      AND SENDER_ID != #{usrId}
   </update>

   <!-- 채팅방 메시지 조회 -->
   <select id="selectMessageList" resultMap="message_rm">
      SELECT 
         MESSAGE_ID, 
         MESSAGE_CONTENT, 
         READ_FL, 
         SENDER_ID, 
         CHATTING_ID,
         TO_CHAR(SEND_TIME, 'YYYY.MM.DD HH24:MI') AS SEND_TIME 
      FROM MESSAGE
      WHERE CHATTING_ID  = #{chattingId}
      ORDER BY MESSAGE_ID
   </select>

   <!-- 채팅 상대 검색 -->
   <select id="selectTarget" resultMap="user_rm">
      SELECT 
         USR_ID, 
         USR_EML 
      FROM USR_INF
      WHERE (USR_EML LIKE '%${query}%')
      AND USR_IS_CL = 'N'
      AND USR_ID != ${usrId}
   </select>

</mapper>
